#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2021 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# Builds a PDF out of a Markdown file.
#
# This is part of the [MoVeDo](https://github.com/movedo) project.
# See LICENSE.md for copyright information.

script_dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
# shellcheck source=./_common.sh
. "${script_dir}/_common.sh"

#h2p_tool=wkhtmltopdf
h2p_tool=weasyprint

_check_tool pandoc       # for Markdown ot HTML conversion
_check_tool $h2p_tool    # for HTML to PDF conversion
if [ "$h2p_tool" = "wkhtmltopdf" ] && $tool -h | grep "Reduced Functionality"
then
	_error "The version of 'wkhtmltopdf' found in the PATH does not support links in PDFs (among other things). Please install the static version instead."
fi
_check_env

app_name="Make PDF through HTML"
script_name="$(basename "$0")"
# parameters
single_html="$pdf_dir/doc.html"
debug=$(_movedo_shell_var_to_bool "${MVD_DEBUG:-false}")
individual=$(_movedo_shell_var_to_bool "${MVD_INDIVIDUAL_PDFS:-$(_movedo_shell_var_to_bool "${MVD_INDIVIDUAL:-false}")}")

function print_help() {

	echo "$app_name - Builds PDFs out of Markdown files."
	echo "wkhtmltopdf or weasyprint is used for this,"
	echo "using HTML as an intermediary format."
	echo
	echo "Usage:"
	echo "  $script_name [OPTIONS]"
	echo "Options:"
	echo "  -h, --help              Show this help message"
	echo "  --mvd-debug             Create (do not delete) the intermediary *.html file."
	echo "                          Equivalent to command-line: MVD_DEBUG=1"
	echo "  --mvd-individual(-pdfs) Create individual PDFs"
	echo "                          (one per Markdwn source file),"
	echo "                          in addition to the merged one."
	echo "                          Equivalent to command-line: MVD_INDIVIDUAL=1"
	echo "Examples:"
	echo "  $script_name --mvd-individual"
}

# read command-line args
POSITIONAL=()
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		--mvd-debug)
			debug=true
			;;
		--mvd-individual|--mvd-individual-pdfs)
			individual=true
			;;
		--mvd-*)
			# Ignore this option; it is used in other MoVeDo scripts
			_movedo_common_arg_has_value "$arg" && shift
			;;
		*) # non-/unknown option
			POSITIONAL+=("$arg") # save it in an array for later
			;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters
args=()
[ "$#" -gt 0 ] && args=("$@")

cd "$gen_src_dir"

echo
echo "Generating combined HTML (Pandoc) ..."
mkdir -p "$pdf_dir"

pandoc_extra=()
pandoc_extra+=("--citeproc")
export pandoc_extra

wkhtmltopdf_extra=()
wkhtmltopdf_extra+=(--page-size A4)
wkhtmltopdf_extra+=(--margin-bottom 20mm)
wkhtmltopdf_extra+=(--margin-top 20mm)
wkhtmltopdf_extra+=(--minimum-font-size 16)
export wkhtmltopdf_extra

weasyprint_extra=()
weasyprint_extra+=(--media-type=screen)
weasyprint_extra+=(--base-url="$gen_src_dir")
export weasyprint_extra

export templates_dir
export h2p_tool

function generateHtml() {

	file_md="$1"
	file_html="$2"

	pandoc \
		--from=markdown \
		--to=html \
		--standalone \
		--markdown-headings=atx \
		--table-of-contents \
		--output="$file_html" \
		--css="$templates_dir/pandoc-github.css" \
		"${pandoc_extra[@]}" \
		"${args[@]}" \
		"$file_md"
}

function generatePdf() {

	file_html="$1"
	file_pdf="$2"

	if [ "$h2p_tool" = "wkhtmltopdf" ]
	then
		$h2p_tool \
			"${wkhtmltopdf_extra[@]}" \
			"$file_html" \
			"$file_pdf"
	else
		if true
		then
			$h2p_tool \
				"${weasyprint_extra[@]}" \
				"$file_html" \
				"$file_pdf"
		else
			pandoc \
				--from=markdown \
				--to=html5 \
				--pdf-engine=weasyprint \
				--pdf-engine-opt=--presentational-hints \
				--pdf-engine-opt=--media-type=screen \
				--metadata link-citations=true \
				--webtex=https://latex.codecogs.com/svg.latex? \
				--css="$templates_dir/pandoc-github.css" \
				--output="$file_pdf" \
				"$file_md"
		fi
		echo "PDF file generated: '$file_pdf'"
		echo
	fi
}

function generateHtmlAndPdf() {

	file_md="$1"
	file_html="$2"
	file_pdf="$3"

	mkdir -p "$(dirname "$file_html")"
	generateHtml "$file_md" "$file_html"

	mkdir -p "$(dirname "$file_pdf")"
	generatePdf "$file_html" "$file_pdf"

	if $debug
	then
		echo "DEBUG: Created intermediary file '$file_html'"
	else
		rm "$file_html"
	fi
}

echo
echo "Generating combined PDF ($h2p_tool) ..."

if [ -f "$single_md" ]
then
	generateHtmlAndPdf "$single_md" "$single_html" "$single_pdf"
fi

if $individual
then
	echo
	echo "Generating individual HTML and PDFs (Pandoc & $h2p_tool) ..."

	while read -r file_md
	do
		file_html="$pdf_dir/${file_md%.md}.html"
		file_pdf="$pdf_dir/${file_md%.md}.pdf"
		generateHtmlAndPdf "$file_md" "$file_html" "$file_pdf"
		echo "PDF file generated: '$file_pdf'"
	done < "$index_md_file"
	echo
fi
