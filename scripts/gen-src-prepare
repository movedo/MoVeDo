#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2021-2022 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# Prepares the generated sources directory.
#
# This is part of the [MoVeDo](https://github.com/movedo) project.
# See the LICENSES/ folder for copyright information.

script_dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
# shellcheck source=./_common.sh
. "$script_dir/_common.sh"

tools=()
tools+=("cpio") # for copying directory trees
tools+=("projvar") # for gathering project related meta-data
tools+=("repvar") # for replacing variables in files
_check_tools "${tools[@]}"

app_name="Generate Sources Preparer"
script_name="$(basename "$0")"
# parameters
copy_source_files=$(_movedo_shell_var_to_bool "${MVD_COPY_SOURCE_FILES:-true}")
repo_url="${MVD_REPO_URL:-$(_git_remote_web_url)}"

function print_help() {

	echo "$app_name - Prepares the generated sources directory"
	echo "for sources to actually be generated."
	echo
	echo "Usage:"
	echo "  $script_name [OPTIONS]"
	echo "Options:"
	echo "  -h, --help              Show this help message"
	echo "  --mvd-no-copy-sources   Do not copy the original source files into the generated-sources dir as well."
	echo "                          Equivalent to command-line: MVD_COPY_SOURCE_FILES=0"
	echo "  --mvd-repo-url [URL]    Use this as the repo URL, instead of extracting it from the git repo."
	echo "                          Equivalent to command-line: MVD_REPO_URL=[URL]"
	echo "Examples:"
	echo "  $script_name"
}

# read command-line args
POSITIONAL=()
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		--mvd-no-copy-sources)
			copy_source_files=false
			;;
		--mvd-repo-url)
			repo_url="$1"
			shift
			;;
		--mvd-*)
			# Ignore this option; it is used in other MoVeDo scripts
			_movedo_common_arg_has_value "$arg" && shift
			;;
		*) # non-/unknown option
			POSITIONAL+=("$arg") # save it in an array for later
			;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


mkdir -p "$gen_src_dir"

echo
echo "Copy source *dir* structure to generated-sources dir ..."
find . \
		-type d \
		\( ! -regex '.*/\..*' \) \
		\( ! -path "./${build_dir_rel}*" \) \
		\( ! -path "./movedo/*" \) \
		\( ! -path "./movedo" \) \
		\( ! -path "./public/*" \) \
		\( ! -path "./public" \) \
		\( ! -path "./script/*" \) \
		\( ! -path "./script" \) \
		\( ! -path "./_site/*" \) \
		\( ! -path "./_site" \) \
		\( ! -path "./.git/*" \) \
		\( ! -path "./.git" \) \
	| cpio -pdvm --quiet "$gen_src_dir" 2> /dev/null
mkdir -p "$gen_src_dir/assets/images" # HACK

if $copy_source_files
then
	echo
	echo "Copy source *files* to generated-sources dir ..."
	find . \
			-type f \
			\( ! -path "./${build_dir_rel}*" \) \
			\( ! -path "./movedo/*" \) \
			\( ! -path "./public/*" \) \
			\( ! -path "./_site/*" \) \
			\( ! -path "./script/*" \) \
			\( ! -path "./.git*" \) \
			\( ! -name "*.pp.md" \) \
			\( ! -name "README.md" \) \
		| cpio -pdvm "$gen_src_dir" 2> /dev/null

	echo
	echo "Gather projected related meta-data (mostly using 'projvar') ..."
	projvar \
		--none \
		--file-out "$proj_vars_gen"
	source "$proj_vars_gen"
	{
		if [ -n "${PROJECT_REPO_WEB_URL+x}" ]
		then
			echo "PROJECT_SOURCE_URL=$PROJECT_REPO_WEB_URL"
			if [ -n "${PROJECT_VERSION+x}" ]
			then
				echo "PROJECT_VERSION_URL=${PROJECT_REPO_WEB_URL}/-/tree/${PROJECT_VERSION}/"
			fi
		fi
		# An ... only slightly hacky solution for "${KEY}" instances in comments
		echo "KEY=\${KEY}"
	} >> "$proj_vars_gen"

	echo
	echo "Copy (and pre-process) *.md source files to generated-sources dir,"
	echo "replacing these variables:"
	sed -e 's|^|\t|' < "$proj_vars_gen"
	echo "Processing ..."
	find "$gen_src_dir" \
		-type f \
		\( ! -path "$gen_src_dir/${build_dir_rel}*" \) \
		\( ! -path "$gen_src_dir/movedo/*" \) \
		\( ! -path "$gen_src_dir/public/*" \) \
		\( ! -path "$gen_src_dir/_site/*" \) \
		\( ! -path "$gen_src_dir/script/*" \) \
		\( ! -path "$gen_src_dir/.git*" \) \
		\( ! -name "*.pp.md" \) \
		\( ! -name "README.md" \) \
		\( -name "*.md" \
		-o -name "$(basename "$doc_meta_file")" \) \
		| sort -u \
		| while read -r pot_template_file
		do
			printf '\t"%s" ...\n' "$pot_template_file"
			pot_template_file_tmp="${pot_template_file}_tmp"
			repvar \
				--fail-on-missing-values \
				--input "$pot_template_file" \
				--variables-file "$proj_vars_gen" \
				--output "$pot_template_file_tmp"
			mv "$pot_template_file_tmp" "$pot_template_file"
		done
fi

